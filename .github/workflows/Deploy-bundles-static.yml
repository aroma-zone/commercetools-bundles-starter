name: Deploy bundles-static

on:
  push:
    paths:
      - 'packages/bundles-static/**'
    branches: [ master ]
  workflow_dispatch:

env:
  ResourceGroupName: rg_web_mwd_dev
  ResourceGroupRegionLocation: francecentral
  StorageAccountName: stctbundlesstatic
  SkuName: "Standard_LRS"
  Kind: "StorageV2"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      
    - uses: actions/checkout@v3

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
  
    - uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
        
    - if: steps.yarn-cache.outputs.cache-hit != 'true'
      name: Install dependencies
      run: yarn install --immutable
        
    - name: Building
      env: 
         APPLICATION_ID: ${{ secrets.APPLICATION_ID }}
         MC_APP_ENV: production
      run: |
         cd packages/bundles-static
         yarn add @commercetools-frontend/mc-scripts
         yarn run build && yarn compile-html:prod
      
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Create Storage account
      uses: azure/powershell@v1
      id: SA_step
      with:
        azPSVersion: "latest"
        inlineScript: |
          $storageAccount = Get-AzStorageAccount -ResourceGroupName ${{ env.ResourceGroupName }} -Name ${{ env.StorageAccountName }} -ErrorAction SilentlyContinue
          if($storageAccount -eq $null){
             $storageAccount = New-AzStorageAccount -ResourceGroupName ${{ env.ResourceGroupName }} -Name ${{ env.StorageAccountName }} -Location ${{ env.ResourceGroupRegionLocation }} -SkuName ${{ env.SkuName }} -Kind ${{ env.Kind }}
             Enable-AzStorageStaticWebsite -Context $storageAccount.Context -IndexDocument "index.html" -ErrorDocument404Path "index.html"
          }
          $webpoints = $storageAccount.PrimaryEndpoints
          Write-host "Web endpoints: $webpoints"

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob delete-batch --account-name ${{ env.StorageAccountName }} --auth-mode key -s '$web'
          az storage blob upload-batch --account-name ${{ env.StorageAccountName }} --auth-mode key -d '$web' -s ./packages/bundles-static/public
          
    - name: logout
      run: |
        az logout
      if: always()
